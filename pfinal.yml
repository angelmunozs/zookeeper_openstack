heat_template_version: 2017-02-24

description: Escenario de la practica final

###################################################################################
############################ Seccion de Parametros ################################
###################################################################################




###################################################################################
###################################################################################
###################################################################################



###################################################################################
############################# Seccion de Recursos #################################
###################################################################################

resources:

  ###############################################################################################
  ######### Generación de key pairs para los servidores y la maquina de administracion. #########
  ###############################################################################################
 
  keypair1:
    type: OS::Nova::KeyPair
    properties:
      save_private_key: true
      name: key1

  keypair2:
    type: OS::Nova::KeyPair
    properties:
      save_private_key: true
      name: key2

  keypair3:
    type: OS::Nova::KeyPair
    properties:
      save_private_key: true
      name: key3

  keypair4:
    type: OS::Nova::KeyPair
    properties:
      save_private_key: true
      name: key4

  keypair5:
    type: OS::Nova::KeyPair
    properties:
      save_private_key: true
      name: key5

  keypair6:
    type: OS::Nova::KeyPair
    properties:
      save_private_key: true
      name: key6

  keypair7:
    type: OS::Nova::KeyPair
    properties:
      save_private_key: true
      name: key7


  ###############################################################################################
  ############### Generación de los elementos de red: redes y subredes asociadas. ###############
  ###############################################################################################

  net1:
        type: OS::Neutron::Net
        properties:
          name: net1

  net2:
        type: OS::Neutron::Net
        properties:
          name: net2

  subnet1:
        type: OS::Neutron::Subnet
        properties:
          name: subnet1
          network_id: { get_resource: net1 }
          gateway_ip: 10.1.1.1
          dns_nameservers: [8.8.8.8]
          cidr: 10.1.1.0/24
          allocation_pools:
            - start: 10.1.1.8
              end: 10.1.1.100

  subnet2:
        type: OS::Neutron::Subnet
        properties:
          name: subnet2
          network_id: { get_resource: net2 }
          gateway_ip: 10.1.2.1
          dns_nameservers: [8.8.8.8]
          cidr: 10.1.2.0/24
          allocation_pools:
            - start: 10.1.2.8
              end: 10.1.2.100


  ###############################################################################################
  ################# Configuracion del router y conexion con las dos redes creadas. ##############
  ###############################################################################################

  router:
    type: OS::Neutron::Router
    properties:
      name: r1
      external_gateway_info:
        network: ExtNet 

  router_interface_1:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: subnet1 }

  router_interface_2:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: subnet2 }


  ###############################################################################################
  ################# Generación del entorno Zookeeper con su configuracion inicial. ##############
  ###############################################################################################

  # Configuracion mediante CLOUD-INIT del entorno Zookeeper.
  zookeeper_ensemble_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        packages:
          - aptsh
          - default-jre-headless
          - libzookeeper-java
          - zookeeper
        runcmd:
          - git clone https://github.com/revilla-92/zookeeper_ensemble
          - cd zookeeper_ensemble
          - chmod 777 deploy_zk.sh
          - ./deploy_zk.sh

  # Configuracion de las maquinas virtuales del entorno zookeeper.
  zk1:
   type: OS::Nova::Server
   properties:
    name: zk1
    key_name: { get_resource: keypair1 }
    image: xenial-server-cloudimg-amd64-vnx
    flavor: m1.smaller
    user_data_format: SOFTWARE_CONFIG
    user_data: {get_resource: zookeeper_ensemble_config}
    networks:
      - network: { get_resource: net2 }

  zk2:
   type: OS::Nova::Server
   properties:
    name: zk2
    key_name: { get_resource: keypair2 }
    image: xenial-server-cloudimg-amd64-vnx
    flavor: m1.smaller
    user_data_format: SOFTWARE_CONFIG
    user_data: {get_resource: zookeeper_ensemble_config}
    networks:
      - network: { get_resource: net2 }

  zk3:
   type: OS::Nova::Server
   properties:
    name: zk3
    key_name: { get_resource: keypair3 }
    image: xenial-server-cloudimg-amd64-vnx
    flavor: m1.smaller
    user_data_format: SOFTWARE_CONFIG
    user_data: {get_resource: zookeeper_ensemble_config}
    networks:
      - network: { get_resource: net2 }


  ###############################################################################################
  ################## Generación de los servidores con su configuracion inicial. #################
  ###############################################################################################

  # Configuracion mediante CLOUD-INIT de los servidores.
  server_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        packages:
          - aptsh
          - default-jre-headless
          - libzookeeper-java
          - zookeeper
        runcmd:
          - git clone https://github.com/revilla-92/zookeeper_servers
          - cd zookeeper_servers

  # Configuracion de los servidores donde se arrancara la aplicacion del banco.
  server1:
   type: OS::Nova::Server
   properties:
    name: server1
    key_name: { get_resource: keypair4 }
    image: xenial-server-cloudimg-amd64-vnx
    flavor: m1.smaller
    user_data_format: SOFTWARE_CONFIG
    user_data: {get_resource: server_config}
    networks:
     - network: { get_resource: net1 }

  server2:
   type: OS::Nova::Server
   properties:
    name: server2
    key_name: { get_resource: keypair5 }
    image: xenial-server-cloudimg-amd64-vnx
    flavor: m1.smaller
    user_data_format: SOFTWARE_CONFIG
    user_data: {get_resource: server_config}
    networks:
     - network: { get_resource: net1 }

  server3:
   type: OS::Nova::Server
   properties:
    name: server3
    key_name: { get_resource: keypair6 }
    image: xenial-server-cloudimg-amd64-vnx
    flavor: m1.smaller
    user_data_format: SOFTWARE_CONFIG
    user_data: {get_resource: server_config}
    networks:
     - network: { get_resource: net1 }


  ###############################################################################################
  ################ Generación de la maquina de administracion y su ip flotante. #################
  ###############################################################################################

  admin_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: ExtNet
      port_id: { get_resource: admin_vm_port }

  admin_vm:
   type: OS::Nova::Server
   properties:
    name: admin_vm
    key_name: { get_resource: keypair7 }
    image: xenial-server-cloudimg-amd64-vnx
    flavor: m1.smaller
    networks: 
      - port: { get_resource: admin_vm_port }

  admin_vm_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: net1 }
      fixed_ips:
        - subnet_id: { get_resource: subnet1 }


  ###############################################################################################
  ################### Generación del balanceador de carga y sus pool_members. ###################
  ###############################################################################################

  loadbalancer:
    type: OS::Neutron::LBaaS::LoadBalancer
    properties:
      vip_subnet: { get_resource: subnet1 }

  pool:
    type: OS::Neutron::LBaaS::Pool
    properties:
      lb_algorithm: ROUND_ROBIN
      protocol: HTTP
      listener: { get_resource: listener }

  listener:
    type: OS::Neutron::LBaaS::Listener
    properties:
      loadbalancer: { get_resource: loadbalancer }
      protocol: HTTP
      protocol_port: 80

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: ExtNet
      port_id: { get_attr: [loadbalancer, vip_port_id ]}

  pool_member1:
    type: OS::Neutron::LBaaS::PoolMember
    properties:
      pool: { get_resource: pool }
      address: { get_attr: [ server1, first_address ]}
      protocol_port: 8080
      subnet: { get_resource: subnet1 }

  pool_member2:
    type: OS::Neutron::LBaaS::PoolMember
    properties:
      pool: { get_resource: pool }
      address: { get_attr: [ server2, first_address ]}
      protocol_port: 8080
      subnet: { get_resource: subnet1 }

  pool_member3:
    type: OS::Neutron::LBaaS::PoolMember
    properties:
      pool: { get_resource: pool }
      address: { get_attr: [ server3, first_address ]}
      protocol_port: 8080
      subnet: { get_resource: subnet1 }


  ###############################################################################################
  ####################### Generación del Firewall, sus reglas y politica. #######################
  ###############################################################################################

  ssh_rule:
    type: OS::Neutron::FirewallRule
    properties:
      name: Allow_SSH
      description: Allow SSH access on TCP port 22 to head nodes
      action: allow
      protocol: tcp
      destination_port: 22
      destination_ip_address: { get_attr: [admin_vm, first_address ]}

  www_rule:
    type: OS::Neutron::FirewallRule
    properties:
      name: Allow_WWW
      description: Allow WWW access on TCP port 80 to LoadBalancer node
      action: allow
      protocol: tcp
      destination_port: 80
      destination_ip_address: { get_attr: [loadbalancer, first_address ]}

  Intern_rule:
    type: OS::Neutron::FirewallRule
    properties:
      name: Allow_From_Inside
      description: Allow all traffic from inside network.
      action: allow
      source_ip_address: 10.1.1.0/24

  FirewallPolicy:
    type: OS::Neutron::FirewallPolicy
    properties:
      firewall_rules: [ssh_rule, www_rule, Intern_rule]
      description: Policy that includes specified rules for this scenario
      name: FWAAS_Policy

  FWAAS:
    type: OS::Neutron::Firewall
    properties:
      name: FWAAS
      description: FWAAS that implements specified policy for the scenario
      firewall_policy_id: { get_resource: FirewallPolicy }


###################################################################################
###################################################################################
###################################################################################



###################################################################################
############################# Seccion de Salidas ##################################
###################################################################################





###################################################################################
###################################################################################
###################################################################################